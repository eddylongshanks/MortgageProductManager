// <auto-generated>
// This code was generated by a kontent-generators-net tool
// (see https://github.com/kontent-ai/model-generator-net).
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// For further modifications of the class, create a separate file with the partial class.
// </auto-generated>

using Kontent.Ai.Management.Models.LanguageVariants.Elements;
using Kontent.Ai.Management.Models.Shared;

namespace MortgageManager.CMS.Models
{
    public class ProductMortgage : IProductMortgage
    {
        //public string CashbackAmountCodename => "cashback_amount";
        //public string CompletionFeeCodename => "completion_fee";
        //public string DailyInterestCalculationCodename => "daily_interest_calculation";
        //public string DetailsPageCodename => "details_page";
        //public string DocumentsCodename => "documents";
        //public string EarlyRepaymentChargeCodename => "early_repayment_charge";
        //public string IncentiveOptionsCodename => "incentive_options";
        //public string InterestRatesCodename => "interest_rates";
        //public string KeyFeaturesCodename => "key_features";
        //public string LoanAmountCodename => "loan_amount";
        //public string MinimumTermCodename => "minimum_term";
        //public string ReservationFeeCodename => "reservation_fee";
        //public string TermsAndConditionsCodename => "terms_and_conditions";

        public string ClientTypeCodename => "client_type";
        public string ComparisonCostCodename => "comparison_cost";
        public string DealTermCodename => "deal_term";
        public string FeesCodename => "fees";
        public string FullDescriptionCodename => "full_description";
        public string HeadingCodename => "heading";
        public string IllustrationCodename => "illustration";
        public string IncentivesCodename => "incentives";
        public string InitialInterestRateCodename => "initial_interest_rate";
        public string MaturityDateCodename => "maturity_date";
        public string MaximumLtvCodename => "maximum_ltv____";
        public string MortgageTypesCodename => "mortgage_types";
        public string NameCodename => "name";
        public string ProductCodeCodename => "product_code";
        public string RateTypeCodename => "mortgage_type";
        public string StandardVariableRateCodename => "standard_variable_rate";

        //public decimal? CashbackAmount { get; set; }
        //public IEnumerable<IMultipleChoiceOption> ClientType { get; set; }
        //public IRichTextContent CompletionFee { get; set; }
        //public IRichTextContent DailyInterestCalculation { get; set; }
        //public IEnumerable<IAsset> Documents { get; set; }
        //public IRichTextContent EarlyRepaymentCharge { get; set; }
        //public string Heading { get; set; }
        //public string Illustration { get; set; }
        //public IEnumerable<IMultipleChoiceOption> IncentiveOptions { get; set; }
        //public IRichTextContent Incentives { get; set; }
        //public string InitialInterestRate { get; set; }
        //public IRichTextContent InterestRates { get; set; }
        //public string KeyFeatures { get; set; }
        //public string LoanAmount { get; set; }
        //public IRichTextContent MinimumTerm { get; set; }
        //public IEnumerable<ITaxonomyTerm> MortgageTypes { get; set; }
        //public IRichTextContent ReservationFee { get; set; }
        //public string StandardVariableRate { get; set; }
        //public IContentItemSystemAttributes System { get; set; }
        //public IEnumerable<IAsset> TermsAndConditions { get; set; }

        public string Codename => Name?.Replace(" ", "_").Replace("-", "_").Replace(".", "_").ToLower();
        public string ClientType { get; set; }
        public string ComparisonCost { get; set; }
        public string? DealTerm { get; set; }
        public string Fees { get; set; }
        public string FullDescription { get; set; }
        public string Heading { get; set; }
        public string Illustration { get; set; }
        public string InitialInterestRate { get; set; }
        public DateTime? MaturityDate { get; set; }
        public string MaximumLtv { get; set; }
        public string MortgageTypes { get; set; }
        public string Name { get; set; }
        public string PageCodename => $"page_{Codename}";
        public string ProductCode { get; set; }
        public string RateType { get; set; }        
        public string StandardVariableRate { get; set; }

        public DateTimeElement GetDateTimeElementForMaturityDate()
        {
            if (MaturityDate == null)
                return null;

            try
            {
                return new DateTimeElement()
                {
                    Element = Reference.ByCodename(MaturityDateCodename),
                    Value = MaturityDate.Value,
                };
            }
            catch (Exception ex)
            {
                throw new Exception($"Error processing {nameof(this.GetDateTimeElementForMaturityDate)} with value: {MaturityDate}. Message: {ex.Message}");
            }
        }
        public TextElement GetTextElementFor(string propertyName)
        {
            try
            {
                var property = typeof(ProductMortgage).GetProperty(propertyName);
                string prop = $"{propertyName}Codename";
                var propertyCodename = typeof(ProductMortgage).GetProperty(prop);

                if (property == null || propertyCodename == null)
                {
                    throw new ArgumentException($"Property '{propertyName}' not found on type '{typeof(ProductMortgage).Name}'.");
                }

                var propertyValue = property.GetValue(this).ToString();
                var propertyCodenameValue = propertyCodename.GetValue(this).ToString();

                return new TextElement()
                {
                    Element = Reference.ByCodename(propertyCodenameValue),
                    Value = propertyValue
                };
            }
            catch (Exception ex)
            {
                throw new Exception($"Error processing {nameof(this.GetTextElementFor)} with {propertyName}. Message: {ex.Message}");
            }
        }

        public RichTextElement GetRichTextElementFor(string propertyName)
        {
            try
            {
                var property = typeof(ProductMortgage).GetProperty(propertyName);
                string prop = $"{propertyName}Codename";
                var propertyCodename = typeof(ProductMortgage).GetProperty(prop);

                if (property == null || propertyCodename == null)
                {
                    throw new ArgumentException($"Property '{propertyName}' not found on type '{typeof(ProductMortgage).Name}'.");
                }

                var propertyValue = property.GetValue(this).ToString();
                var propertyCodenameValue = propertyCodename.GetValue(this).ToString();

                return new RichTextElement()
                {
                    Element = Reference.ByCodename(propertyCodenameValue),
                    Value = propertyValue
                };
            }
            catch (Exception ex)
            {
                throw new Exception($"Error processing {nameof(this.GetRichTextElementFor)} with {propertyName}. Message: {ex.Message}");
            }
        }

        public MultipleChoiceElement GetMultipleChoiceElementFor(string propertyName)
        {
            try
            {
                var property = typeof(ProductMortgage).GetProperty(propertyName);
                string prop = $"{propertyName}Codename";
                var propertyCodename = typeof(ProductMortgage).GetProperty(prop);

                if (property == null || propertyCodename == null)
                {
                    throw new ArgumentException($"Property '{propertyName}' not found on type '{typeof(ProductMortgage).Name}'.");
                }

                var propertyValue = property.GetValue(this).ToString();
                var propertyCodenameValue = propertyCodename.GetValue(this).ToString();

                return new MultipleChoiceElement()
                {
                    Element = Reference.ByCodename(propertyCodenameValue),
                    Value = [Reference.ByCodename(propertyValue)],
                };
            }
            catch (Exception ex)
            {
                throw new Exception($"Error processing {nameof(this.GetMultipleChoiceElementFor)} with {propertyName}. Message: {ex.Message}");
            }
        }

        

        //public TextElement GetProductCodeTextElement()
        //{
        //    return new TextElement()
        //    {
        //        Element = Reference.ByCodename(ProductCodeCodename),
        //        Value = ProductCode
        //    };
        //}

        //public TextElement GetProductNameTextElement()
        //{
        //    return new TextElement()
        //    {
        //        Element = Reference.ByCodename(NameCodename),
        //        Value = Name
        //    };
        //}

    }
}